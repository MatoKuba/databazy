{% extends '../base.twig' %}
{% block content %}
    <style>
        /* Custom CSS */
        #myTable {
            margin: 0 auto;
        }
        input[type="text"]:focus {
            outline: 1px solid #007BFF;
        }
        .highlight {
            background-color: #76f57a;
        }
    </style>
    <h2 class="text-center">Vytvor tabuľku</h2>
    <form method="POST" class="text-center" onsubmit="event.preventDefault();">
        <br><br>
        <label for="row">Row:</label>
        <input type="number" id="row" name="row" class="form-input" placeholder="0" min="0">
        <label for="column">Column:</label>
        <input type="number" id="column" name="column" class="form-input" placeholder="0" min="0">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name" class="form-input" placeholder="nazov tabulky" required>

    </form>
    <script>
        function setInputValidation(id) {
            const input = document.getElementById(id);

            input.addEventListener('keydown', function(event) {
                if (event.key === 'Backspace' || event.key === 'Delete') {
                    return; // разрешаем удаление символов
                }

                if (/[-+=.e]$/.test(input.value + event.key)) {
                    event.preventDefault();
                }
            });

            input.addEventListener('input', function() {
                input.value = input.value.replace(/[-+=.e]/g, '');

                if (input.value === '0') {
                    alert('0 nemožno zadať!');
                    input.value = '';
                }
            });
        }

        setInputValidation('row');
        setInputValidation('column');
    </script>


    <table id="myTable" border="1" style="width: 50%; height: 100px;">
        {% for i in row|default([]) %}
            <tr>
                {% for j in column|default([]) %}
                    <td style="border: 1px solid black; padding: 5px;">
                        <label>
                            <input type="text" style="border: 0;" name="data[{{ i }}][{{ j }}]" value="{{ data[i][j]|default('') }}" onblur="updateDatabase({{ i }}, {{ j }}, this.value)" onclick="this.removeAttribute('readonly')">
                        </label>
                    </td>
                {% endfor %}
            </tr>
        {% endfor %}
    </table>


    <div class="text-center mt-3">

        <button type="button" id="btnDrop">Drop</button>
        <button type="button" id="btnInsert">addRow</button>
        <button type="button" id="btnCreate">Create</button>
        <button type="button" id="deleteBtn">Delete</button>
    </div>

    <p id="vystup" class="text-center"></p>


    <script>
        //cakanie na premenne neni spravene
        // odoslat tlacidlo ?..


        function addRow() {
            var table = document.getElementById("myTable");
            var vstup = document.getElementById("vystup");
            var name = document.getElementById("name").value;

            // Insert a new row at the end of the table
            var newRow = table.insertRow(table.rows.length);
            for (var i = 0; i < table.rows[0].cells.length; i++) {
                var newCell = newRow.insertCell(i);

                if (i === 0) {
                    // Set the correct value for the ID column
                    newCell.innerText = table.rows.length - 1;
                } else {
                    newCell.innerHTML = "<input type='text' name='data[" + (table.rows.length - 1) + "][" + (i + 1) + "]' value='' style='border: 0; outline: 0; width: 100%; height: 100%;'>";

                    // Get the input element and add event listeners
                    const input = newCell.querySelector('input');
                    input.addEventListener('keypress', function (e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                        }
                    });

                    input.onblur = (function (currentRow, currentCol) {
                        return function () {
                            onCellValueChanged(currentRow + 1, currentCol + 1, this.value);
                        };
                    })(table.rows.length - 1, i);
                }

                newCell.style.border = "1px solid black";
                newCell.style.padding = "5px";

                // Add checkbox to first cell of new row
                if (i === 0) {
                    var checkbox = document.createElement("input");
                    checkbox.type = "checkbox";
                    checkbox.name = "checkbox";
                    newCell.appendChild(checkbox);
                }
            }

            // Get the headers, excluding the ID column
            const headers = Array.from(table.rows[0].cells).map((cell, index) => {
                if (index !== 0) {
                    return cell.innerText.trim();
                }
            }).filter(header => header);

            // Generate the INSERT query without including the ID column
            let insertQueries = `INSERT INTO ${name} (${headers.join(",")}) VALUES (${headers.map(() => 'NULL').join(",")});`;

            var selectedRow = parseInt(document.getElementById("row").value);
            selectedRow += 1;
            document.getElementById("row").value = selectedRow;

            // Update the vstup innerHTML
            vstup.innerHTML = insertQueries;

            console.log(insertQueries);

            sendUpdateToServer(insertQueries);
        }

        function sendUpdateToServer(update) { //spracovanie
            fetch('vytvortabulku/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ update: update })
            })
                .then(response => {
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        const flash = document.createElement('div');
                        flash.classList.add('alert', 'alert-success');
                        flash.textContent = data.message;

                        const form = document.querySelector('form');
                        form.parentNode.insertBefore(flash, form.nextSibling);

                        setTimeout(() => {
                            flash.parentNode.removeChild(flash);
                        }, 2000);
                    } else {
                        const flash = document.createElement('div');
                        flash.classList.add('alert', 'alert-danger');
                        flash.textContent = data.message;

                        const form = document.querySelector('form');
                        form.parentNode.insertBefore(flash, form.nextSibling);
                    }
                })
                .catch(error => {
                    // handle the error
                });
        }

        function sendDropToServer(remove) { //spracovanie
            fetch('vytvortabulku/droptab', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ remove: remove})
            })
                .then(response => {
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        const flash = document.createElement('div');
                        flash.classList.add('alert', 'alert-success');
                        flash.textContent = data.message;

                        const form = document.querySelector('form');
                        form.parentNode.insertBefore(flash, form.nextSibling);

                        setTimeout(() => {
                            flash.parentNode.removeChild(flash);
                        }, 2000);
                    } else {
                        const flash = document.createElement('div');
                        flash.classList.add('alert', 'alert-danger');
                        flash.textContent = data.message;

                        const form = document.querySelector('form');
                        form.parentNode.insertBefore(flash, form.nextSibling);
                    }
                })
                .catch(error => {
                    // handle the error
                });
        }

        function sendCreatetoServer(values) {
            fetch('/vytvortabulku/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ values: values })
            })
                .then(response => {
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        const flash = document.createElement('div');
                        flash.classList.add('alert', 'alert-success');
                        flash.textContent = data.message;

                        const form = document.querySelector('form');
                        form.parentNode.insertBefore(flash, form.nextSibling);

                        setTimeout(() => {
                            flash.parentNode.removeChild(flash);
                        }, 2000);
                    } else {
                        const flash = document.createElement('div');
                        flash.classList.add('alert', 'alert-danger');
                        flash.textContent = data.message;

                        const form = document.querySelector('form');
                        form.parentNode.insertBefore(flash, form.nextSibling);
                    }
                })
                .catch(error => {
                    console.log(error);
                });
        }


        function onCellValueChanged(row, col, value) {
            if (col === 1) {
                return; // Do not process the ID column
            }

            var name = document.getElementById("name").value;
            var inputElement = document.querySelector(`input[name="data[${row}][${col}]"]`);
            var oldValue = inputElement ? inputElement.getAttribute('data-oldvalue') : null;
            var columnName = document.querySelector(`input[name="data[1][${col}]"]`).value;
            var vstup = document.getElementById("vystup").value;

            if (row === 1) {
                var oldColumnName = document.querySelector(`input[name="data[${row}][${col}]"]`).getAttribute('data-oldColumnName');
                console.log(`ALTER TABLE ${name} CHANGE ${oldColumnName} ${value} VARCHAR(50);`);
                vstup.innerHTML = `ALTER TABLE ${name} CHANGE ${oldColumnName} ${value} VARCHAR(50);`;
                document.querySelector(`input[name="data[${row}][${col}]"]`).setAttribute('data-oldColumnName', value);
            } else {
                console.log(`UPDATE ${name} SET ${columnName}='${value}' WHERE ID=${row - 1};`);
                vstup.innerHTML = `UPDATE ${name} SET ${columnName}='${value}' WHERE ID=${row - 1};`;
            }

            if (inputElement) {
                inputElement.setAttribute('data-oldvalue', value);
            }

            var command;
            if (row === 1) {
                command = `ALTER TABLE ${name} CHANGE ${oldColumnName} ${value} VARCHAR(50);`;
            } else {
                command = `UPDATE ${name} SET ${columnName}='${value}' WHERE ID=${row - 1};`;
            }

            sendUpdateToServer(command);
        }

        function getColumnType(col) {
            const numberOfRows = document.getElementById("myTable").rows.length;
            let allInt = true;
            let allFloat = true;
            let maxIntWidth = 0;

            for (let i = 1; i < numberOfRows; i++) {
                const cellValue = document.querySelector(`input[name="data[${i}][${col}]"]`).value;
                if (cellValue) {
                    if (/^\d+$/.test(cellValue)) {
                        maxIntWidth = Math.max(maxIntWidth, cellValue.length);
                    } else {
                        allInt = false;
                    }
                    if (!/^\d+(\.\d+)?$/.test(cellValue)) {
                        allFloat = false;
                    }
                }
            }

            if (allInt) {
                return `INT(${maxIntWidth})`;
            } else if (allFloat) {
                return "FLOAT";
            } else {
                return "VARCHAR(50)";
            }
        }
        //<input type="text" id="vstup" name="vstup" class="form-input" placeholder="nazov tabulky" required>
        function createTable() {
            var name = document.getElementById("name").value;
            if (!name) {
                alert("Zadajte názov tabuľky!");
                return;
            }
            var table = document.getElementById("myTable");
            var selectedRow = parseInt(document.getElementById("row").value) + 1;
            var selectedCol = parseInt(document.getElementById("column").value) + 1;
            var headers = document.getElementById("value")?.value.split(";") || [];
            var vystup = document.getElementById("vystup");
            vystup.innerHTML = "CREATE TABLE " + name;
            console.log("CREATE TABLE " + name + ";")

            let values = "ID INT PRIMARY KEY AUTO_INCREMENT,"; // Add AUTO_INCREMENT attribute

            if (headers.length > 0) {
                vystup.innerHTML += "(" + headers.join(",") + ")" + ";";
            } else {
                vystup.innerHTML += ";";
            }
            while(table.rows.length > 0) {
                table.deleteRow(0);
            }

            for (var i = 0; i < selectedRow; i++) {
                var row = table.insertRow(table.rows.length);
                var isFirstRow = (i === 0);
                for (var j = 0; j < selectedCol; j++) {
                    var cell = row.insertCell(j);
                    var value = '';

                    if (i === 0) {
                        if (j === 0) {
                            value = 'ID';
                        } else if (headers.length > 0) {
                            value = headers[j - 1];
                        } else {
                            value = 'column' + j;
                        }
                    } else if (j === 0) {
                        value = i;
                    }

                    if (isFirstRow || j === 0) { // Change this condition back
                        if (i !== 0 || j !== 0) { // Add this condition to avoid adding a checkbox to the first column
                            var checkbox = document.createElement('input');
                            checkbox.type = 'checkbox';
                            checkbox.name = 'check[' + (i + 1) + '][' + (j + 1) + ']';
                            checkbox.style.margin = 'auto';
                            cell.appendChild(checkbox);
                        }
                    }

                    if (headers.length > 0 && i === 0 && j !== 0) { // Add the condition (j !== 0)
                        value = headers[j - 1];
                    } else if (i === 0 && j !== 0) { // Add the condition (j !== 0)
                        value = 'column' + j;
                        values += value + " VARCHAR(50)" + ",";
                    }
                    var input = document.createElement('input');
                    input.type = 'text';
                    input.name = 'data[' + (i + 1) + '][' + (j + 1) + ']';
                    input.value = value;
                    input.style.border = '0';
                    input.style.outline = '0';
                    input.style.width = '100%';
                    input.style.height = '100%';

                    if (i === 0) {
                        input.setAttribute('data-oldColumnName', value);
                    }

                    if (j === 0) { // If it's the ID column
                        input.readOnly = true;
                    }

                    // Add event listener for 'keypress' event to prevent input deletion
                    input.addEventListener('keypress', function (e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                        }
                    });

                    input.onblur = (function(currentRow, currentCol) {
                        return function() {
                            onCellValueChanged(currentRow + 1, currentCol + 1, this.value);
                        };
                    })(i, j);
                    cell.appendChild(input);
                    cell.style.border = '1px solid black';
                    cell.style.padding = '5px';

                }

            }
            //return [name, values];
            values = values.slice(0, -1);
            let output = `CREATE TABLE ${name}(${values});`;
            console.log(output);

            vystup.innerHTML = output;

            sendCreatetoServer(output);

            setTimeout(() => {
                let insertQueries = `INSERT INTO ${name} (${headers.join(",")}) VALUES (${headers.map(() => 'NULL').join(",")});`;

                for (var i = 0; i < selectedRow - 1; i++) { // -1 because the first row is the header
                    console.log(insertQueries);
                    sendUpdateToServer(insertQueries);
                }
            }, 500); // Delay for 0.5 seconds (500 milliseconds)

            checkboxFunctionality();
        }

        function checkboxFunctionality() {
            const table = document.getElementById("myTable");

            // Add event listener to each checkbox
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');
            checkboxes.forEach(function (checkbox) {
                checkbox.addEventListener("click", function () {
                    const currentRow = checkbox.parentElement.parentElement.rowIndex;
                    const currentCol = checkbox.parentElement.cellIndex;

                    // Check if checkbox is in first row
                    if (currentRow === 0) {
                        // Highlight column
                        for (let i = 0; i < table.rows.length; i++) {
                            table.rows[i].cells[currentCol].classList.toggle("highlight");
                        }
                    } else {
                        // Highlight row
                        const row = table.rows[currentRow];
                        for (let i = 0; i < row.cells.length; i++) {
                            row.cells[i].classList.toggle("highlight");
                        }
                    }
                });
            });

        }

        function dropTable() {
            var table = document.getElementById("myTable");
            var name = document.getElementById("name").value;
            table.innerHTML = "";
            var vystup = document.getElementById("vystup");
            var remove = `DROP TABLE ${name};`;
            vystup.innerHTML = remove;
            sendDropToServer(remove);
        }

        function deleteSelection() {
            const table = document.getElementById("myTable");
            const name = document.getElementById("name").value; // Get table name

            // Get all checkboxes
            const checkboxes = document.querySelectorAll('input[type="checkbox"]');

            // Check if any checkboxes are checked
            let checked = false;
            const colIndexesToDelete = new Set();
            const rowIndexesToDelete = new Set();

            checkboxes.forEach(function (checkbox) {
                if (checkbox.checked) {
                    checked = true;
                    const currentRow = checkbox.parentElement.parentElement.rowIndex;
                    const currentCol = checkbox.parentElement.cellIndex;

                    // Store row or column indexes to be deleted
                    if (currentRow === 0) {
                        colIndexesToDelete.add(currentCol);
                    } else {
                        rowIndexesToDelete.add(currentRow);
                    }
                }
            });

            // If no checkboxes are checked, display an alert
            if (!checked) {
                alert("Najprv vyberte riadok alebo stĺpec, ktorý chcete odstrániť.");
                return;
            }

            // Generate the ALTER TABLE DROP COLUMN queries
            colIndexesToDelete.forEach(function (colIndex) {
                const columnName = table.rows[0].cells[colIndex].querySelector('input[type="text"]').value;
                let outputCol = `ALTER TABLE ${name} DROP COLUMN ${columnName};`;
                console.log(outputCol);
                sendUpdateToServer(outputCol);
            });

            // Generate the DELETE FROM queries
            rowIndexesToDelete.forEach(function (rowIndex) {
                const rowId = table.rows[rowIndex].cells[0].querySelector('input[type="text"]').value;
                let output = `DELETE FROM ${name} WHERE ID = ${rowId};`;
                console.log(output);
                sendUpdateToServer(output);
            });

            // Delete the rows by iterating through rowIndexesToDelete
            rowIndexesToDelete.forEach(function (rowIndex) {
                table.deleteRow(rowIndex);
            });

            // Convert colIndexesToDelete to an array, sort it in descending order, and iterate through it
            Array.from(colIndexesToDelete).sort((a, b) => b - a).forEach(function (colIndex) {
                for (let i = 0; i < table.rows.length; i++) {
                    table.rows[i].deleteCell(colIndex);
                }
            });
        }

        // pridanie event listenerov pre tlačidlá
        document.getElementById("btnInsert").addEventListener("click", function() {
            addRow();
        });

        document.getElementById("btnDrop").addEventListener("click", function() {
            dropTable();
        });

        document.getElementById("btnCreate").addEventListener("click", function() {
            createTable();
        });
        document.getElementById("deleteBtn").addEventListener("click", function() {
            deleteSelection();
        });
        // Listener for Enter key
        const formInputs = document.querySelectorAll('.form-input');

        formInputs.forEach(input => {
            input.addEventListener('keydown', function(event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    createTable();
                }
            });
        });
        // Listener for Backspace key active all the time
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Backspace' || event.key === 'Delete') {
                event.preventDefault();
                deleteSelection();
            }
        });

    </script>

{% endblock %}



